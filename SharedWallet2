//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";

contract Allow is Ownable {
    
   mapping(address => uint) public allowance;
   
   event AllowanceChanged(address indexed _forWho, address indexed _fromWhom, uint _oldAmount, uint newAmount);
    
    function addAllowance(address _who, uint _amount) public onlyOwner {
        emit AllowanceChanged(_who, msg.sender,allowance[_who], _amount);
        allowance[_who] = _amount;
    }
    
    function reduceAllowance(address _who, uint _amount) internal {
        emit AllowanceChanged(_who, msg.sender,allowance[_who], allowance[_who] - _amount);
        allowance[_who] -= _amount;
    }
    
    
    modifier ownerOrAllowed(uint _amount){
        require(isOwner() || allowance[msg.sender] >= _amount, "You are not allowed");
        _;
    } 
    
}

contract SharedWallet is Allow{
    
    function withdrawMoney(address payable _to, uint _amount) public ownerOrAllowed(_amount){
       require(_amount <= address(this).balance, "There is not enough money");
        if(!isOwner()) {
           reduceAllowance(msg.sender, _amount);
       }
       _to.transfer(_amount);
   }
   
   function sendMoney() public payable {
   
   }
}
